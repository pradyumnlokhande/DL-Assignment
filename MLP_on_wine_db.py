# -*- coding: utf-8 -*-
"""MLP on WINE db.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16id94S-b5UlKEQotqIjN-tuHsWr2eTyS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris

w =pd.read_csv('/content/winequality_red.csv')
w.head()

w.isnull().sum()

w.info()

from sklearn.model_selection import train_test_split
X=w.drop('quality',axis='columns')
Y=w.quality
xtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=0.30,random_state=1)

print('x train',xtrain.shape)
print('x test',xtest.shape)
print('y train',ytrain.shape)
print('y test',ytest.shape)

from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler()
xtrain_scaler=scaler.fit_transform(xtrain)
xtest_scaler=scaler.fit_transform(xtest)
xtrain_scaler[0:5]

xtest_scaler[0:5]

from sklearn.neural_network import MLPClassifier

model = MLPClassifier(hidden_layer_sizes=(150,100,45),activation='relu',solver='adam',max_iter=100)

model.fit(xtrain_scaler,ytrain)

ypred=model.predict(xtest_scaler)

from sklearn.metrics import accuracy_score,confusion_matrix

accuracy=accuracy_score(ytest,ypred)
accuracy

cm=confusion_matrix(ytest,ypred)
cm

from sklearn.metrics import classification_report
cr=classification_report(ytest,ypred)
print(cr)

plt.plot(model.loss_curve_)
plt.xlabel=('iteration')
plt.ylabel('loss')
plt.show()

param={
    #'hidden_layer_sizes':[(200,1),(150,2),(100,3),(50,4),(10,5)],
    'activation':['identity','logistic','tanh','relu'],
    'solver':['adam','sgd'],
    'alpha':[0.0001,0.001],
    'max_iter':[100,200,50]
    }

from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import GridSearchCV



gd=GridSearchCV(estimator=model, param_grid=param, cv=8)

gd.fit(xtrain_scaler,ytrain)
gd.best_params_
gd.best_score_

y_pred=gd.predict(xtest_scaler)

print(gd.best_params_)
print(gd.best_score_)